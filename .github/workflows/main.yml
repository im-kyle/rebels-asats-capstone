# This Workflow Builds, Tests, Lints, and Deploys the UI and API to Heroku
name: CICD for Main branch

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# 'jobs' is the list of all the workflows that will kick off.
jobs:

  build-and-test-the-stack:
    name: Build and Test the Stack
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build the stack
        run: docker-compose up -d
      # - name: Test
      #   run: docker run --network container:rebels-asats-capstone-capstone-db-1 appropriate/curl -s --retry 10 --retry-connrefused http://localhost:5000/

# !!!!!!!!!!!!!!!!!!!
  # services:
  # capstone-db:
  #   image: postgres
  #   restart: always
  #   environment: 
  #    - DATABASE_HOST=127.0.0.1
  #    - POSTGRES_USER=postgres
  #    - POSTGRES_PASSWORD=docker
  #    - POSTGRES_PORT=5432
  #    - POSTGRES_DB=capstone
  #   ports:
  #    - '5432:5432'
  #   healthcheck:
  #       test: ["CMD-SHELL", "pg_isready -U postgres"]
  #       interval: 5s
  #       timeout: 5s
  #       retries: 5
  #   volumes:
  #     - pgdatasource:/var/lib/postgresql/data
  # !!!!!!!!!!!!!!!!
  
  # This workflow kicks off the build and test for the UI
  # build-and-test-ui:
  #   # Name of the build job
  #   name: Build and Test UI
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # `steps` are the actions that will execute on this job.
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
  #     # Runs a single command using the runners shell to build the UI
  #     - name: Build UI
  #       run: |
  #         docker build -t capstone-ui ./ui
  #     # Runs a set of commands using the runners shell to test the UI
  #     - name: Test UI
  #       run: |
  #         docker run -e CI=true capstone-ui npm run test
          
  # # This workflow kicks off the build and test for the API
  # build-and-test-api:
  #   name: Build and Test API
  #   needs: build-db
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Build API
  #       run: |
  #         docker build -t capstone-api ./api
  #     - name: Test API
  #       run: |
  #         docker run -e CI=true capstone-api npm run test

  
  # This workflow kicks off the deployment to Heroku for the UI
  deploy-ui:
    name: Deploy UI to Heroku
    # Needs specifies the steps that must previously complete in order to deploy your application.
    needs: [ build-and-test-ui, build-and-test-api ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: akhileshns/heroku-deploy@v3.12.12
        with: 
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "rebels-asats-ui"
          heroku_email: "imkyle.dev@gmail.com"
          appdir: "ui/"
          usedocker: true
  
  # This workflow kicks off the deployment to Heroku for the UI
  deploy-api:
    name: Deploy API to Heroku
    needs: [ build-and-test-ui, build-and-test-api ]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: akhileshns/heroku-deploy@v3.12.12
        with: 
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "rebels-asats-api"
          heroku_email: "imkyle.dev@gmail.com"
          appdir: "api/"
          usedocker: true

  # This workflow kicks off the linter for your API.  
  run-api-linter:
    name: Lint API Code Base
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files
          fetch-depth: 0
      # Installs dependencies on the runner for API
      - name: Install linter options
        run: npm --prefix ./api install
      # Executes the linter on the API code base.
      - name: Run Linter
        run: npm --prefix ./api run lint
  
  # This workflow kicks off the linter for API.  
  run-ui-linter:
    name: Lint UI Code Base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Installs dependencies on the runner for UI
      - name: Install linter options
        run: npm --prefix ./ui install
      # Executes the linter on the UI code base.
      - name: Run Linter
        run: npm --prefix ./ui run lint
